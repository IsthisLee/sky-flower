generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  nickname       String      @db.VarChar(255)
  profileImageId Int?        @unique @map("profile_image_id")
  createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  deletedAt      DateTime?   @map("deleted_at") @db.Timestamp(0)
  updatedAt      DateTime    @updatedAt @map("updated_at") @db.Timestamp(0)
  files          File[]      @relation("UserToFiles")
  posts          Post[]
  postLikes      PostLike[]
  profileImage   File?       @relation("UserToProfileImage", fields: [profileImageId], references: [id])
  userOauths     UserOauth[]
}

model UserOauth {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  oauthId   String    @map("oauth_id") @db.VarChar(255)
  provider  Provider
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  user      User      @relation(fields: [userId], references: [id])

  @@unique([oauthId, provider])
}

model File {
  id               Int        @id @default(autoincrement())
  userId           Int        @map("user_id")
  originalFileName String     @map("original_file_name")
  filePath         String     @map("file_path")
  fileType         FileType   @map("file_type")
  fileExtension    String     @map("file_extension")
  createdAt        DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime   @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt        DateTime?  @map("deleted_at") @db.Timestamp(0)
  user             User       @relation("UserToFiles", fields: [userId], references: [id])
  postFiles        PostFile[]
  profileOwner     User?      @relation("UserToProfileImage")
}

model Post {
  id        Int        @id @default(autoincrement())
  userId    Int        @map("user_id")
  title     String
  content   String
  latitude  Float?
  longitude Float?
  address   String?
  city      String?
  district  String?
  viewCount Int        @map("view_count")
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime   @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime?  @map("deleted_at") @db.Timestamp(0)
  user      User       @relation(fields: [userId], references: [id])
  postFiles PostFile[]
  postLikes PostLike[]
}

model PostFile {
  postId    Int       @map("post_id")
  fileId    Int       @map("file_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(0)
  file      File      @relation(fields: [fileId], references: [id])
  post      Post      @relation(fields: [postId], references: [id])

  @@id([postId, fileId])
}

model PostLike {
  userId    Int       @map("user_id")
  postId    Int       @map("post_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  post      Post      @relation(fields: [postId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

enum Provider {
  kakao
}

enum FileType {
  image
  video
  other
}
